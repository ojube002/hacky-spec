using System.Collections;
using System;
using UnityEngine;
using UnityEngine.Networking;
using Hacky.rest.models;

namespace Hacky.rest.services {

   
{{#operations}}
    public sealed class {{classname}} : MonoBehaviour
    {
       private static {{classname}} _instance;

        public static {{classname}} Instance => _instance; 


        private void Awake()
        {
            if (_instance != null && _instance != this)
            {
                Destroy(this.gameObject);
            } else {
                _instance = this;
            }
        }
        {{#operation}}
        /**
        * {{&notes}}
        {{#summary}}
        * @summary {{&summary}}
        {{/summary}}
        {{#allParams}}   
        * @param {{paramName}} {{description}}
        {{/allParams}}
        */
        public void {{operationId}}({{#allParams}} {{dataType}} {{paramName}}{{/allParams}}, Action<{{{returnType}}}> onSuccess, Action<HttpError> onError, string token) {
         
            
           StartCoroutine(Request("{{httpMethod}}", $"https://bittineuvos.com/api{{path}}",onSuccess, onError, token{{#allParams}}{{#if @first}}{{#is this 'string'}}{{else}}, JsonUtility.ToJson({{paramName}}){{/is}}{{/if}}{{/allParams}}));
        
        }

        {{/operation}}

        private IEnumerator Request<TModel,TError>(string reqmethod, string url, Action<TModel> onSuccess, Action<TError> onError, string token, string data = null)
        {

            
            using (UnityWebRequest www = CreateRequest(reqmethod,url,data))
            {
                if(www == null) throw new NullReferenceException($"CreateRequest: no reqmethod {reqmethod} found");
                if(data != null) www.SetRequestHeader("Content-Type", "application/json");
                www.SetRequestHeader("Authorization",$"Bearer {token}");
                yield return www.SendWebRequest();

                if (www.isNetworkError || www.isHttpError)
                {
                    Debug.Log($"{www.responseCode} : {www.downloadHandler.text}");
                    var error = JsonUtility.FromJson<TError>(www.downloadHandler.text);
                    onError(error);
                    //onError($"{www.responseCode} : {www.downloadHandler.text}");
                }
                else
                {
                    Debug.Log(www.downloadHandler.text);
                    var model = JsonUtility.FromJson<TModel>(www.downloadHandler.text);
                    onSuccess(model);

                }
                 
            }
        }
        private UnityWebRequest CreateRequest(string reqmethod, string url, string data = null)
        {
            if(reqmethod == "POST") return UnityWebRequest.Post(url,data);
            else if(reqmethod == "GET") return UnityWebRequest.Get(url);
            else if(reqmethod == "PUT") return UnityWebRequest.Put(url,data);
            else if(reqmethod == "DELETE") return UnityWebRequest.Delete(url);
            return null;
        }
       
    }
{{/operations}}

} 