openapi: 3.0.3
info:
  title: hacky rest api
  description: REST API for test
  version: 3.0.0
security:
  - bearer:
      []
paths:
  /user:
    post:
      operationId: createUser
      summary: Create user
      description: Creates a new user
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
        description: Payload
        required: true
      responses:
        "200":
          description: Created User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterUser"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    put:
      operationId: updateUser
      summary: Updates user
      description: Updates users information
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    get:
      operationId: findUser
      summary: Find user
      description: Finds user 
      tags:
        - User
      responses:
        "200":
          description: found user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    delete:
      operationId: deleteUser
      summary: Deletes a user
      description: Deletes a user
      tags:
        - User
      responses:
        "200":
          description: Deleted user successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /character:
    post:
      operationId: createCharacter
      summary: Create character
      description: Creates character
      tags:
        - Character
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Character"
        description: Payload
        required: true
      responses:
        "200":
          description: Created Character
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  "/characterlist":
    get:
      operationId: listCharacters
      summary: Lists characters
      description: Lists Characters
      tags:
        - Character
      responses:
        "200":
          description: List of characters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Character"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  "/character/{characterId}":
    get:
      operationId: findCharacter
      summary: Find character
      description: Finds character by id
      tags:
        - Character
      parameters:
        - name: characterId
          required: true
          in: path
          description: character id
          schema:
            type: string
      responses:
        "200":
          description: A created news article
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    delete:
      operationId: deleteCharacter
      summary: Deletes a character
      description: Deletes a character
      tags:
        - Character
      parameters:
        - name: characterId
          required: true
          in: path
          description: character id
          schema:
            type: string
      responses:
        "200":
          description: Deleted successfully character
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  /stat:
    post:
      operationId: createStat
      summary: Create stat
      description: Creates a new stat
      tags:
        - Stat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stat"
        description: Payload
        required: true
      responses:
        "200":
          description: Created a stat
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stat"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    put:
      operationId: updateStat
      summary: Updates stat
      description: Updates stat information
      tags:
        - Stat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stat"
        description: Payload
        required: true
      responses:
        "200":
          description: Updated stat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Stat"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
  "/stat/{characterId}":
    get:
      operationId: findStat
      summary: Find stat
      description: Finds stat by characterId
      tags:
        - Stat
      parameters:
        - name: characterId
          required: true
          in: path
          description: character id
          schema:
            type: string
      responses:
        "200":
          description: found user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stat"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
    delete:
      operationId: deleteStat
      summary: Deletes a stat
      description: Deletes a stat
      tags:
        - Stat
      parameters:
        - name: characterId
          required: true
          in: path
          description: stat id
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Deleted stat successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stat"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpError"
components:
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    User:
      type: object
      required:
        - username
      properties:
        firstname:
          type: string
        lastname:
          type: string
        username:
          type: string
        email:
          type: string
    RegisterUser:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
    Character:
      type: object
      required:
        - id
        - name
        - userId
        - statsId
      properties:
        id:
          type: string
        name:
          type: string
        userId:
          type: string
        statsId:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    Stat:
      type: object
      required:
        - level
        - experience
      properties:
        id:
          type: string
        level:
          type: integer
          format: int32
        experience:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    HttpError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          